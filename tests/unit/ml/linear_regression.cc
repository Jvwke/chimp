#include <gtest/gtest.h>

#include "db/dataset.h"
#include "ml/linear_regression.h"


static double iris_data [] = {
// sepalLength, sepalWidth, petalLength, petalWidth, species
5.1,3.5,1.4,0.2,1.0,
4.9,3.0,1.4,0.2,1.0,
4.7,3.2,1.3,0.2,1.0,
4.6,3.1,1.5,0.2,1.0,
5.0,3.6,1.4,0.2,1.0,
5.4,3.9,1.7,0.4,1.0,
4.6,3.4,1.4,0.3,1.0,
5.0,3.4,1.5,0.2,1.0,
4.4,2.9,1.4,0.2,1.0,
4.9,3.1,1.5,0.1,1.0,
5.4,3.7,1.5,0.2,1.0,
4.8,3.4,1.6,0.2,1.0,
4.8,3.0,1.4,0.1,1.0,
4.3,3.0,1.1,0.1,1.0,
5.8,4.0,1.2,0.2,1.0,
5.7,4.4,1.5,0.4,1.0,
5.4,3.9,1.3,0.4,1.0,
5.1,3.5,1.4,0.3,1.0,
5.7,3.8,1.7,0.3,1.0,
5.1,3.8,1.5,0.3,1.0,
5.4,3.4,1.7,0.2,1.0,
5.1,3.7,1.5,0.4,1.0,
4.6,3.6,1.0,0.2,1.0,
5.1,3.3,1.7,0.5,1.0,
4.8,3.4,1.9,0.2,1.0,
5.0,3.0,1.6,0.2,1.0,
5.0,3.4,1.6,0.4,1.0,
5.2,3.5,1.5,0.2,1.0,
5.2,3.4,1.4,0.2,1.0,
4.7,3.2,1.6,0.2,1.0,
4.8,3.1,1.6,0.2,1.0,
5.4,3.4,1.5,0.4,1.0,
5.2,4.1,1.5,0.1,1.0,
5.5,4.2,1.4,0.2,1.0,
4.9,3.1,1.5,0.1,1.0,
5.0,3.2,1.2,0.2,1.0,
5.5,3.5,1.3,0.2,1.0,
4.9,3.1,1.5,0.1,1.0,
4.4,3.0,1.3,0.2,1.0,
5.1,3.4,1.5,0.2,1.0,
5.0,3.5,1.3,0.3,1.0,
4.5,2.3,1.3,0.3,1.0,
4.4,3.2,1.3,0.2,1.0,
5.0,3.5,1.6,0.6,1.0,
5.1,3.8,1.9,0.4,1.0,
4.8,3.0,1.4,0.3,1.0,
5.1,3.8,1.6,0.2,1.0,
4.6,3.2,1.4,0.2,1.0,
5.3,3.7,1.5,0.2,1.0,
5.0,3.3,1.4,0.2,1.0,
#if 0
7.0,3.2,4.7,1.4,2.0,
6.4,3.2,4.5,1.5,2.0,
6.9,3.1,4.9,1.5,2.0,
5.5,2.3,4.0,1.3,2.0,
6.5,2.8,4.6,1.5,2.0,
5.7,2.8,4.5,1.3,2.0,
6.3,3.3,4.7,1.6,2.0,
4.9,2.4,3.3,1.0,2.0,
6.6,2.9,4.6,1.3,2.0,
5.2,2.7,3.9,1.4,2.0,
5.0,2.0,3.5,1.0,2.0,
5.9,3.0,4.2,1.5,2.0,
6.0,2.2,4.0,1.0,2.0,
6.1,2.9,4.7,1.4,2.0,
5.6,2.9,3.6,1.3,2.0,
6.7,3.1,4.4,1.4,2.0,
5.6,3.0,4.5,1.5,2.0,
5.8,2.7,4.1,1.0,2.0,
6.2,2.2,4.5,1.5,2.0,
5.6,2.5,3.9,1.1,2.0,
5.9,3.2,4.8,1.8,2.0,
6.1,2.8,4.0,1.3,2.0,
6.3,2.5,4.9,1.5,2.0,
6.1,2.8,4.7,1.2,2.0,
6.4,2.9,4.3,1.3,2.0,
6.6,3.0,4.4,1.4,2.0,
6.8,2.8,4.8,1.4,2.0,
6.7,3.0,5.0,1.7,2.0,
6.0,2.9,4.5,1.5,2.0,
5.7,2.6,3.5,1.0,2.0,
5.5,2.4,3.8,1.1,2.0,
5.5,2.4,3.7,1.0,2.0,
5.8,2.7,3.9,1.2,2.0,
6.0,2.7,5.1,1.6,2.0,
5.4,3.0,4.5,1.5,2.0,
6.0,3.4,4.5,1.6,2.0,
6.7,3.1,4.7,1.5,2.0,
6.3,2.3,4.4,1.3,2.0,
5.6,3.0,4.1,1.3,2.0,
5.5,2.5,4.0,1.3,2.0,
5.5,2.6,4.4,1.2,2.0,
6.1,3.0,4.6,1.4,2.0,
5.8,2.6,4.0,1.2,2.0,
5.0,2.3,3.3,1.0,2.0,
5.6,2.7,4.2,1.3,2.0,
5.7,3.0,4.2,1.2,2.0,
5.7,2.9,4.2,1.3,2.0,
6.2,2.9,4.3,1.3,2.0,
5.1,2.5,3.0,1.1,2.0,
5.7,2.8,4.1,1.3,2.0,
6.3,3.3,6.0,2.5,3.0,
5.8,2.7,5.1,1.9,3.0,
7.1,3.0,5.9,2.1,3.0,
6.3,2.9,5.6,1.8,3.0,
6.5,3.0,5.8,2.2,3.0,
7.6,3.0,6.6,2.1,3.0,
4.9,2.5,4.5,1.7,3.0,
7.3,2.9,6.3,1.8,3.0,
6.7,2.5,5.8,1.8,3.0,
7.2,3.6,6.1,2.5,3.0,
6.5,3.2,5.1,2.0,3.0,
6.4,2.7,5.3,1.9,3.0,
6.8,3.0,5.5,2.1,3.0,
5.7,2.5,5.0,2.0,3.0,
5.8,2.8,5.1,2.4,3.0,
6.4,3.2,5.3,2.3,3.0,
6.5,3.0,5.5,1.8,3.0,
7.7,3.8,6.7,2.2,3.0,
7.7,2.6,6.9,2.3,3.0,
6.0,2.2,5.0,1.5,3.0,
6.9,3.2,5.7,2.3,3.0,
5.6,2.8,4.9,2.0,3.0,
7.7,2.8,6.7,2.0,3.0,
6.3,2.7,4.9,1.8,3.0,
6.7,3.3,5.7,2.1,3.0,
7.2,3.2,6.0,1.8,3.0,
6.2,2.8,4.8,1.8,3.0,
6.1,3.0,4.9,1.8,3.0,
6.4,2.8,5.6,2.1,3.0,
7.2,3.0,5.8,1.6,3.0,
7.4,2.8,6.1,1.9,3.0,
7.9,3.8,6.4,2.0,3.0,
6.4,2.8,5.6,2.2,3.0,
6.3,2.8,5.1,1.5,3.0,
6.1,2.6,5.6,1.4,3.0,
7.7,3.0,6.1,2.3,3.0,
6.3,3.4,5.6,2.4,3.0,
6.4,3.1,5.5,1.8,3.0,
6.0,3.0,4.8,1.8,3.0,
6.9,3.1,5.4,2.1,3.0,
6.7,3.1,5.6,2.4,3.0,
6.9,3.1,5.1,2.3,3.0,
5.8,2.7,5.1,1.9,3.0,
6.8,3.2,5.9,2.3,3.0,
6.7,3.3,5.7,2.5,3.0,
6.7,3.0,5.2,2.3,3.0,
6.3,2.5,5.0,1.9,3.0,
6.5,3.0,5.2,2.0,3.0,
6.2,3.4,5.4,2.3,3.0,
5.9,3.0,5.1,1.8,3.0,
#endif
};


TEST(LinearRegression, SetGetName)
{
    chimp::ml::model::LinearRegression lm;
    lm.SetName("linear_model");
    ASSERT_EQ("linear_model", lm.GetName());
}


TEST(LinearRegression, Build)
{
    std::vector<double> data_to_load;
    chimp::db::dataset::Dataset dataset("iris", 5);

    for (unsigned int i = 0; i < sizeof(iris_data)/sizeof(double); ++i) {
        data_to_load.push_back(iris_data[i]);
    }
    ASSERT_EQ(0, dataset.Append(data_to_load));

    chimp::db::dataset::Dimensions dims = dataset.GetDimensions();
    ASSERT_EQ(5, dims.cols);
    ASSERT_EQ(50, dims.rows);

    // model sepal length using sepal width
    chimp::ml::model::LinearRegression::BuildInput binput;
    binput.dataset = &dataset;
    binput.feature_columns.push_back(1);
    binput.response_column = 0;

    chimp::ml::model::LinearRegression lm;

    ASSERT_EQ(0, lm.Build(&binput));

    chimp::ml::model::LinearRegression::PredictionInput pinput;
    pinput.data.push_back(3.0);
    pinput.data.push_back(3.4);

    auto result = lm.Predict(&pinput);
    chimp::ml::model::LinearRegression::PredictionResult *r;
    r = dynamic_cast<chimp::ml::model::LinearRegression::PredictionResult*>(result.get());
    ASSERT_EQ(2, r->predictions.size());
    ASSERT_NEAR(4.71, r->predictions[0], 0.01);
    ASSERT_NEAR(4.99, r->predictions[1], 0.01);
}
